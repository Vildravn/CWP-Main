NGame = {
	START_DATE = "1946.1.1"
	END_DATE = "2046.1.1"

}

NAI = {
	DIPLO_PROPOSAL_BREAK_THRESHOLD = -100				# At this or less acceptance, AI breaks off an existing pact

	INFLUENCE_DEFICIT_BREAK_PACT_OVER_SPENDING_LIMIT_MULT = 0.5			# AI multiplies the value of pacts that are over their action-type spending limit by this when in an Influence deficit

	RAISE_TAX_TO_DESIRED_INCOME_THRESHOLD = 0.03
	RAISE_TAX_ABOVE_DESIRED_INCOME_NO_DEBT_THRESHOLD = 0.01
	RAISE_TAX_ABOVE_DESIRED_INCOME_WITH_DEBT_THRESHOLD = 0.02
	LOWER_TAX_TO_DESIRED_INCOME_THRESHOLD = 0.04
	LOWER_TAX_BELOW_DESIRED_INCOME_THRESHOLD = 500.0
	RAISE_TAX_HIGH_DEBT_OVERRIDE_RATIO = 0.01 # At this amount of debt, any level of tax is OK to deal with it

	MONEY_SPENDING_INNOVATION_CRITICAL_THRESHOLD = 0.75 # If innovation production compared to cap is worse than this, AI considers it very important to improve
	MONEY_SPENDING_INNOVATION_DESIRED_THRESHOLD = 1.00 # If innovation production compared to cap is worse than this, AI considers it important to improve
	MONEY_SPENDING_BUREAUCRACY_CRITICAL_THRESHOLD = 0.75 # If bureaucracy income to expenses is worse than this, AI considers it critical to improve it
	MONEY_SPENDING_BUREAUCRACY_DESIRED_THRESHOLD = 1.00 # If bureaucracy income to expenses is worse than this, AI wants to improve it
	MONEY_SPENDING_BUREAUCRACY_EXCESSIVE_THRESHOLD = 1.25 # If bureaucracy income to expenses is better than this, AI will not improve it
	MONEY_SPENDING_INFRASTRUCTURE_CRITICAL_THRESHOLD = 0.90 # If infra production to usage is worse than this, AI considers it critical to improve it
	MONEY_SPENDING_INFRASTRUCTURE_DESIRED_THRESHOLD = 1.00 # If infra production to usage is worse than this, AI wants to improve it

	# Below data is used to calculate how much weight the AI places on promoting an IG
	PROMOTION_BASE_VALUE = 0

	# Below data is used to calculate how much weight the AI places on suppressing an IG
	SUPPRESSION_BASE_VALUE = 0

	# Below data is used to calculate how much weight the AI places on consumption taxes
	CONSUMPTION_TAX_INCOME_VALUE = 10 # Per percent of state expenses in taxable value (this is then multiplied by relative authority cost of the good)
	CONSUMPTION_TAX_STAPLE_MULT = 0.5 # Multiply desire to tax staple goods by this
	CONSUMPTION_TAX_LUXURY_MULT = 2.0 # Multiply desire to tax luxury goods by this
	CONSUMPTION_TAX_LOW_INCOME_THRESHOLD = 1.25 # Income-to-expenses threshold below which consumption taxes are a must-have
	CONSUMPTION_TAX_HIGH_INCOME_THRESHOLD = 1.5 # Income-to-expenses threshold at which consumption taxes should be removed (if removal would not put us below this)
	CONSUMPTION_TAX_MAX_NUM_TAXED_GOODS_BASE = 6 # Base max number of goods AI wants to tax
	CONSUMPTION_TAX_MAX_NUM_TAXED_GOODS_PER_MISSING_TAX_TYPE = 2 # Added to max number of goods AI wants to tax for each other type of tax it does not collect

	# Below data is used to calculate how much weight the AI places on a production building
	PRODUCTION_BUILDING_RANDOM_FACTOR = 10.0 # The higher this is, the more random AI construction will be
	PRODUCTION_BUILDING_STATE_RANDOM_FACTOR = 2.0 # The higher this is, the more random AI state selection for building types will be
	PRODUCTION_BUILDING_BASE_VALUE = 1000 # If no ai_value is scripted in the building
	PRODUCTION_BUILDING_NO_AVAILABLE_WORKFORCE_FACTOR = 0.25 # Total weight is multiplied by this if the state lacks enough workforce to staff the building
	PRODUCTION_BUILDING_GOODS_PROFIT_FACTOR = 5000 # Per pound of predicted building profit (divided by employee count per level)
	PRODUCTION_BUILDING_GOODS_DEFICIT_FACTOR = 10000 # Per pound of predicted building deficit (divided by employee count per level and multiplies a negative value)
	PRODUCTION_BUILDING_GOODS_DEFICIT_SUBSIDIZE_FACTOR = 5000 # Overrides PRODUCTION_BUILDING_GOODS_DEFICIT_FACTOR for subsidized buildings
	PRODUCTION_BUILDING_PRODUCED_VALUE_FACTOR = 0.25 # Per pound of produced goods in base value
	PRODUCTION_BUILDING_INCORPORATED_INFRASTRUCTURE_USAGE_FACTOR = 0.05 # Total weight is divided by ( 1 + this * building infrastructure usage ) in incorporated states
	PRODUCTION_BUILDING_UNINCORPORATED_INFRASTRUCTURE_USAGE_FACTOR = 1.0 # Total weight is divided by ( 1 + this * building infrastructure usage ) in unincorporated states
	PRODUCTION_BUILDING_OUTPUT_HIGH_PRICE_THRESHOLD = 1.25 # Lower threshold multiplier of base price for applying 'high price' modifier below
	PRODUCTION_BUILDING_OUTPUT_HIGH_PRICE_FACTOR = 0.75 # Add this value to a building for each unit of money worth of goods above high price threshold that this building produces
	PRODUCTION_BUILDING_OUTPUT_LOW_PRICE_THRESHOLD = 0.75 # Upper threshold multiplier of base price for applying 'low price' modifier below
	PRODUCTION_BUILDING_OUTPUT_LOW_PRICE_FACTOR = -0.5 # Add this value to a building for each unit of money worth of goods below low price threshold that this building produces
	PRODUCTION_BUILDING_SUBSIDIZE_PRICE_FACTOR_MULT = 1.25 # Multiply the effects of price factors on buildings that the AI will consider subsidizing
	PRODUCTION_BUILDING_OUTPUT_NEW_GOODS_FACTOR = 2.0 # Add this value to a building for each unit of money worth of goods that currently isn't available in our market but the AI wants to prioritize
	PRODUCTION_BUILDING_OUTPUT_WANTED_INDUSTRIAL_GOODS_FACTOR = 0.5 # Add this value to a building for each unit of money worth of industrial goods that aren't overproduced in the country and are used by buildings
	PRODUCTION_BUILDING_OUTPUT_WANTED_MILITARY_GOODS_FACTOR = 0.5 # Add this value to a building for each unit of money worth of military goods that aren't overproduced in the country and are used by buildings
	PRODUCTION_BUILDING_OUTPUT_NEEDED_INDUSTRIAL_GOODS_FACTOR = 0.75 # Add this value to a building for each unit of money worth of industrial goods that are underproduced in the country and are used by buildings
	PRODUCTION_BUILDING_OUTPUT_NEEDED_MILITARY_GOODS_FACTOR = 0.75 # Add this value to a building for each unit of money worth of military goods that are underproduced in the country and are used by buildings
	PRODUCTION_BUILDING_CAN_USE_INVESTMENT_POOL_MULT = 1.25 #  Total weight is multiplied by this if the building can be funded by the country's investment pool
	PRODUCTION_BUILDING_FAVORED_GOODS_FACTOR = 0.5 # Add this value to a building for each unit of money worth of building goods output that the AI favors
	PRODUCTION_BUILDING_DISFAVORED_GOODS_FACTOR = -0.25 # Add this value to a building for each unit of money worth of building goods output that the AI disfavors
	PRODUCTION_BUILDING_MISSING_QUALIFICATIONS_MULT = 0.05 # Multiply score by this if there's not enough qualifications to staff the building (disabled for now)
	PRODUCTION_BUILDING_MISSING_INFRASTRUCTURE_DIV = 0.50 # Divide score by ( 1 + this * number of missing infrastructure after adding this building )
	PRODUCTION_BUILDING_DESIRED_INFRASTRUCTURE_SURPLUS = 10 # If infrastructure 'surplus' in state is less than this, AI wants to improve it
	PRODUCTION_BUILDING_BELOW_DESIRED_INFRASTRUCTURE_FACTOR = 10000 # Add this to score if the building would improve infrastructure and it's below desired threshold
	PRODUCTION_BUILDING_EXCESSIVE_INFRASTRUCTURE_SURPLUS = 10.01 # If infra 'surplus' in state is at least this, AI doesn't want to improve it
	PRODUCTION_BUILDING_ABOVE_EXCESSIVE_INFRASTRUCTURE_MULT = 0.25 # Multiply score by this if the building would improve infrastructure and it's above excessive threshold
	PRODUCTION_BUILDING_REDUCE_SHORTAGE_MULT = 5 # Multiply score by this if we're reducing the state region's shortages
	PRODUCTION_BUILDING_INCREASE_SHORTAGE_MULT = 0.01 # Multiply score by this if we're increasing the state region's shortages
	PRODUCTION_BUILDING_OTHER_BUILDING_TYPES_UNDER_CONSTRUCTION_DIV = 0.5 # Divide score by (1 + this * number of other building types queued in the state)
	PRODUCTION_BUILDING_LONG_CONSTRUCTION_TIME_THRESHOLD = 80
	PRODUCTION_BUILDING_LONG_CONSTRUCTION_TIME_MULT = 0.5 # Multiply score by this if construction time would take more than PRODUCTION_BUILDING_LONG_CONSTRUCTION_TIME_THRESHOLD weeks at full construction industry usage (ignores MAX_WEEKLY_CONSTRUCTION_PROGRESS)
	PRODUCTION_BUILDING_VERY_LONG_CONSTRUCTION_TIME_THRESHOLD = 120
	PRODUCTION_BUILDING_VERY_LONG_CONSTRUCTION_TIME_MULT = 0.25 # Multiply score by this if construction time would take more than PRODUCTION_BUILDING_VERY_LONG_CONSTRUCTION_TIME_THRESHOLD weeks at full construction industry usage (ignores MAX_WEEKLY_CONSTRUCTION_PROGRESS)

	# Below data is used to calculate how much weight the AI places on enacting/revoking a law
	CHANGE_LAW_POTENTIAL_CIVIL_WAR_ENACT_CHANCE = 2 # Chance that the AI will proceed with a law change that could cause a civil war (1 = 1%)

	# Below data is used to calculate how much weight the AI places on a production method
	PRODUCTION_METHOD_FAVORED_MILITARY_GOODS_FACTOR = 2.0 # Per base cost * units of goods produced that the AI favors (for military goods)

	# Below data is used to calculate AI's desire for peace
}

NCharacters = {
	MIN_CHARACTER_HEALTH = 0.0					# Baseline is 1.0 (meaning 100%), defined in the base_values modifier. 0.0 means -100% from baseline. [any value]
	MAX_CHARACTER_HEALTH = 2.0					# Baseline is 1.0 (meaning 100%), defined in the base_values modifier. 2.0 means +100% from baseline. [>= MIN_CHARACTER_HEALTH]
	CHARACTER_LIFE_EXPECTANCY_BASE_YEARS = 80	# The median life expecancy in years at baseline health. It's the µ parameter of the normal distribution [> 0]
	CHARACTER_LIFE_EXPECTANCY_STDDEV = 5		# The standard deviation for the life expectancy distribution. It's the σ parameter [> 0]
	CHARACTER_LIFE_EXPECTANCY_CUTOFF = 2		# We clamp the distribution between this amount of σ in both directions. A range of [-3σ; +3σ] accounts for 99.73% of values. [> 0]

	CHARACTER_LIFE_EXPECTANCY_DELTA_YEARS_BELOW_BASELINE = 10	# Random base for years that life expectancy is decreased by, for every point of distance below baseline health [>= 0]
	CHARACTER_LIFE_EXPECTANCY_DELTA_YEARS_ABOVE_BASELINE = 5	# Random base for years that life expectancy is increased by, for every point of distance above baseline health [>= 0]

	# Random base for life expectancy delta yearsis multiplied by a random range of lerp(CHARACTER_LIFE_EXPECTANCY_DELTA_LERP_LOWER_BOUND, CHARACTER_LIFE_EXPECTANCY_DELTA_LERP_UPPER_BOUND)
	CHARACTER_LIFE_EXPECTANCY_DELTA_LERP_LOWER_BOUND = 0.5
	CHARACTER_LIFE_EXPECTANCY_DELTA_LERP_UPPER_BOUND = 1.5
}

NEconomy = {
	POLLUTION_TARGET_DIVISOR_BASE = 1					# Base value to divide total pollution generation by for calculating state region pollution target level
	POLLUTION_TARGET_DIVISOR_ARABLE_LAND_MULT = 1		# Amount per arable land to add to pollution divisor
	POLLUTION_CHANGE_SPEED = 0.5						# Each day, pollution in state region changes by this amount towards target
	POLLUTION_MAX = 255
	POLLUTION_SPREAD_TO_NEIGHBOR = 0.25					# Adjacent state regions always have at least this much of their neighbor's pollution level

	EMPLOYMENT_RESOURCE_DEPLETE_CHANCE = 0.0001	# Multiplied by number of fully employed levels of the building
	BASE_RESOURCE_DISCOVER_CHANCE = 0.00001		# Per day (1.0 = 1%)
	RESOURCE_DISCOVER_MIN_FRACTION = 0.01		# Min fraction of resources that will be discovered for each successful roll
	RESOURCE_DISCOVER_MAX_FRACTION = 0.01		# Max fraction of resources that will be discovered for each successful roll
	FULLY_DISCOVERED_RESOURCE_DEPLETE_CHANCE_MULT = 1.0 # The chance of a resource depleting is multiplied by this when all of the resource has been discovered
	RESOURCE_DEPLETE_MIN_AMOUNT = 1				# Min amount of resources that will be depleted for each successful roll
	RESOURCE_DEPLETE_MAX_AMOUNT = 1				# Max amount of resources that will be depleted for each successful roll

	REINVESTMENT_FALLOFF_START = 100000000				# Below this amount of GDP, increase reinvestment multiplier on a linear scale up to REINVESTMENT_EFFICIENCY_MAX at 0
	REINVESTMENT_FALLOFF_END = 20000000000				# Above REINVESTMENT_FALLOFF_START but below this, apply minimum reinvestment multiplier on a linear scale down to REINVESTMENT_EFFICIENCY_MIN, above this always use REINVESTMENT_EFFICIENCY_MIN

	GOVERNMENT_DIVIDENDS_EFFICIENCY_MIN = 0.25			# Minimum dividend fraction from buildings with government shares that will reach the treasury - the rest will be wasted
	GOVERNMENT_DIVIDENDS_FALLOFF_START = 100000000		# Below this amount of GDP, no government dividends will be wasted
	GOVERNMENT_DIVIDENDS_FALLOFF_END = 20000000000		# Above GOVERNMENT_DIVIDENDS_FALLOFF_START but below this, apply minimum reinvestment multiplier on a linear scale down to GOVERNMENT_DIVIDENDS_FALLOFF_END, above this always use GOVERNMENT_DIVIDENDS_FALLOFF_END

	BASE_NATURAL_DISASTER_CHANCE = 0.0001 # The base chance of a natural disaster happening in a state per week

	BASE_NATURAL_DISASTER_SEVERITY = 1 # The base severity of any natural disaster
	MAX_NATURAL_DISASTER_SEVERITY = 100 # The maximum severity of any natural disaster
	BASE_NATURAL_DISASTER_MORTALITY = 0.01 # The base mortality of any natural disaster, as a fraction of the population in a state
}

NMilitary = {
	MANPOWER_LOST_DUE_TO_ATTRITION_PER_WEEK_MIN = 0.01 	# The minimum percentage of manpower a unit can lose each week due to attrition
	MANPOWER_LOST_DUE_TO_ATTRITION_PER_WEEK_MAX = 0.05 	# The maximum percentage of manpower a unit can lose each week due to attrition
    MIN_USABLE_MANPOWER = 100						# Lowest manpower engaged in a battle limit (otherwise determined by combat width)
	GENERAL_TRAVEL_PIXELS_TO_DAYS_SCALE = 0.005     # Used to convert a travel distance from pixels to days. Example: a travel of 500px becomes 500 * 0.05 = 25 days
    GENERAL_TRAVEL_CAP = 50                         # Limits the travel time to GENERAL_TRAVEL_CAP days. The overseas penalty (GENERAL_TRAVEL_OVERSEAS_SCALE) is still applied.
    GENERAL_AUTO_TRAVEL_MAX_DAYS = 5                # Disables auto traveling if the travel takes more than `GENERAL_AUTO_TRAVEL_MAX_DAYS`. Makes general standby the nearest HQ.
    GENERAL_TRAVEL_OVERSEAS_SCALE = 1.25            # Used if a general is traveling overseas. So the total duration of the travel becomes Duration * GENERAL_TRAVEL_OVERSEAS_SCALE
    GENERAL_TRAVEL_AUTO_REASSIGN_INSTANTLY = 5		# If General is being auto reassigned (front destruction for example) and travel time is below this number of days make them travel instantly
    GENERAL_INVALID_TRAVEL_DAYS = 0                 # If our system fails to compute travel time due to invalid front/HQ position, then use this value as travel time instead. This prevents such cases from causing >300 days travels. This ignores GENERAL_TRAVEL_AUTO_REASSIGN_INSTANTLY.
	COMBAT_UNITS_PER_LEVEL = 1						# Number of combat units each level of military building can support. Must be the same for all recruitable buildings (barracks/conscription centers/naval bases)
	BASE_MORALE_RECOVERED_PER_DAY = 0.03			# Default morale recovered is 3% per day
	BASE_MORALE_LOST_PER_DAY = 0.075				# Default morale lost when out of supply is 5%
}

NDiplomacy = {
	DIPLOMATIC_PACT_COST_DEFAULT = 0					# The default maintenance in Diplomatic Capital for a pact
	DIPLOMATIC_PACT_COST_MULT_FROM_INFAMOUS = 0.50		# Maintenance cost of a pact is increased by this when at Infamous level of infamy
	DIPLOMATIC_PACT_COST_MULT_FROM_NOTORIOUS = 1.00		# Maintenance cost of a pact is increased by this when at Notorious level of infamy
	DIPLOMATIC_PACT_COST_MULT_FROM_PARIAH = 2.00		# Maintenance cost of a pact is increased by this when at Pariah level of infamy

	POWER_RANK_LOSS_THRESHOLD = 0.5
}

NPops = {
	LOYALTIES_GAIN_GRACE_PERIOD = "1948.1.1"	# Until this date, only a scaling part of the Radicals and Loyalists gained from SOL changes will be applied

	ASSIMILATION_RATE = 0.01					# Percentage of pops who will Assimilate into a different Culture each month, if eligible
	MIN_ASSIMILATION = 1000						# If there is any assmiliation at least this many people will assimilate
	CONVERSION_RATE = 0.01						# Percentage of pops who will Convert into a different Religion each month, if eligible
	MIN_CONVERSION = 1000						# If there is any conversion at least this many people will convert

	LOW_POP_THRESHOLD = 10000					# If a state has less than this amount of pops per arable land, apply the low pop modifier
	HIGH_POP_THRESHOLD = 500000					# If a state has more than this amount of pops per arable land, apply the high pop modifier

	POP_MERGE_MAX_WORKFORCE = 300						# Pops with workforce smaller than this may get merged with other pops of the same type in their building / unemployment pool; if zero, no small pop merging will occur, which may have an adverse effect on late-game performance
}

### Pop Growth Constants
@min_birthrate = 0.0015
@max_birthrate = 0.0040
@min_mortality = 0.0010
@max_mortality = 0.0070
@pop_growth_sol_equilibrium = 5							# Equilibrium is where (with no birthrate/death-rate mods) growth is stagnant
@pop_growth_sol_delta_cap = 20							# SoL Delta Cap is where net growth stops increasing with rising SoL, i.e. both drop at the same pace
@pop_growth_sol_cap = 40								# SoL Cap is where they birthrate/death-rate stop dropping

@mortality_at_equilibrium = @[max_birthrate-(pop_growth_sol_equilibrium*(max_birthrate-min_birthrate)/pop_growth_sol_cap)]
@birthrate_at_delta_cap = @[max_birthrate-(pop_growth_sol_delta_cap*(max_birthrate-min_birthrate)/pop_growth_sol_cap)]
@improving_slope = @[(birthrate_at_delta_cap-min_birthrate+min_mortality-mortality_at_equilibrium)/(pop_growth_sol_delta_cap-pop_growth_sol_equilibrium)]
@improving_intercept = @[-1*improving_slope*pop_growth_sol_equilibrium+mortality_at_equilibrium]
@mortality_at_delta_cap = @[improving_slope*pop_growth_sol_delta_cap+improving_intercept]
@fixed_delta_slope = @[(min_mortality-mortality_at_delta_cap)/(pop_growth_sol_cap-pop_growth_sol_delta_cap)]

NPops = {
	POP_GROWTH_BIRTHRATE_REDUCTION_PER_SOL = @[(max_birthrate-min_birthrate)/pop_growth_sol_cap]
	POP_GROWTH_MORTALITY_AT_EQUILIBRIUM = @mortality_at_equilibrium
	POP_GROWTH_STARVING_SLOPE = @[(mortality_at_equilibrium-max_mortality)/pop_growth_sol_equilibrium]
	POP_GROWTH_BIRTHRATE_AT_DELTA_CAP = @birthrate_at_delta_cap
	POP_GROWTH_IMPROVING_SLOPE = @improving_slope
	POP_GROWTH_IMPROVING_INTERCEPT = @improving_intercept
	POP_GROWTH_FIXED_DELTA_SLOPE = @fixed_delta_slope
	POP_GROWTH_FIXED_DELTA_INTERCEPT = @[-1*fixed_delta_slope*pop_growth_sol_cap+min_mortality]

	POP_GROWTH_MIN_BIRTHRATE = @min_birthrate					# Minimum base birthrate per month (at SOL_POP_GROWTH_CAP)
	POP_GROWTH_MAX_BIRTHRATE = @max_birthrate					# Maximum base birthrate per month (at SOL = 0)
	POP_GROWTH_MIN_MORTALITY = @min_mortality					# Maximum base mortality per month (at SOL_POP_GROWTH_CAP)
	POP_GROWTH_MAX_MORTALITY = @max_mortality					# Maximum base mortality per month (at SOL = 0)
	POP_GROWTH_SOL_DELTA_CAP = @pop_growth_sol_delta_cap		# Birthrate and Mortality retains its delta beyond this SoL
	POP_GROWTH_SOL_CAP = @pop_growth_sol_cap					# Birthrate and Mortality reaches its minimum values and does not drop beyond this SoL
	POP_GROWTH_SOL_EQUILIBRIUM = @pop_growth_sol_equilibrium	# The Standard of Living where Birthrate and Mortality correspond, after which Mortality diminishes slower
}
### End Pop Growth Constant defines

NTechnology = {
	TECH_SPREAD_RANDOM_RANGE = 0.1 # How much can distribution of tech spread vary each week
	TECH_AHEAD_OF_TIME_PENALTY_FACTOR = 0.025	# For every tech in a previous era not already researched in this category, take this multiple of the cost as an additional penalty (multiplied by number of eras between the techs)
}

NWar = {
	DEVASTATION_FROM_BATTLES = 2.5 # For each battle
}